Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 17:02:44
<Project 6: String Primitives and Macros    (Proj6_Allendr.a  Page 1 - 1


				TITLE Project 6: String Primitives and Macros    (Proj6_Allendr.asm)

				; Author: Drew Allen
				; Last Modified: 3/13/21
				; OSU email address: Allendr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:    6             Due Date:  3/14/21
				; Description: This program implements two macros for string processing and tests them
				;				with several procedures
								

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				mGetString MACRO prompt, inputBuffer, inputLength, bytesRead
					PUSHAD
					MOV		EDX, prompt
					CALL	WriteString

					MOV		EDX, inputBuffer
					MOV		ECX, inputLength
					CALL	ReadString
					MOV		bytesRead, EAX

					POPAD
				ENDM

				mDisplayString MACRO storedArray
					PUSH	EDX
					MOV		EDX, storedArray
					CALL	WriteString
					CALL	CrLf
					POP		EDX
				ENDM


 = 0000000A				ARRAYSIZE			=			10

 00000000			.data

 00000000 50 52 4F 4A 45		openingTitle		BYTE		"PROJECT 6: String Primitives and Macros",0
	   43 54 20 36 3A
	   20 53 74 72 69
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 00
 00000028 42 79 20 44 72		author				BYTE		"By Drew Allen",0
	   65 77 20 41 6C
	   6C 65 6E 00
 00000036 50 6C 65 61 73		instructionsOne		BYTE		"Please input ten signed decimal integers that can each fit in a 32 bit register.",0
	   65 20 69 6E 70
	   75 74 20 74 65
	   6E 20 73 69 67
	   6E 65 64 20 64
	   65 63 69 6D 61
	   6C 20 69 6E 74
	   65 67 65 72 73
	   20 74 68 61 74
	   20 63 61 6E 20
	   65 61 63 68 20
	   66 69 74 20 69
	   6E 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   00
 00000087 54 68 65 6E 20		instructionsTwo		BYTE		"Then this program will display a list of the numbers, their sum, and their average.",0
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 2E 00
 000000DB 45 6E 74 65 72		userPrompt			BYTE		"Enter a signed integer: ",0
	   20 61 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 3A 20 00
 000000F4 45 52 52 4F 52		errorMessage		BYTE		"ERROR: Invalid input. Entry was too large or not a signed number.",0
	   3A 20 49 6E 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   2E 20 45 6E 74
	   72 79 20 77 61
	   73 20 74 6F 6F
	   20 6C 61 72 67
	   65 20 6F 72 20
	   6E 6F 74 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 2E
	   00
 00000136 50 6C 65 61 73		tryAgainPrompt		BYTE		"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000149 48 65 72 65 20		listMessage			BYTE		"Here are the numbers you entered: ",0
	   61 72 65 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 3A 20 00
 0000016C 54 68 65 20 73		sumMessage			BYTE		"The sum is: ",0
	   75 6D 20 69 73
	   3A 20 00
 00000179 54 68 65 20 61		averageMessage		BYTE		"The average is: ",0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000018A 54 68 61 6E 6B		goodbyeMessage		BYTE		"Thanks for playing! Goodbye.",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   47 6F 6F 64 62
	   79 65 2E 00

 000001A7  0000000D [			userInputBuffer		BYTE		13 DUP(?)
	    00
	   ]
 000001B4  0000000D [			reverseOutputBuffer	BYTE		13 DUP(?)
	    00
	   ]
 000001C1  0000000D [			outputBuffer		BYTE		13 DUP(?)
	    00
	   ]
 000001CE 00000000			userDigitsEntered	SDWORD		?
 000001D2  0000000A [			userArray			SDWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]
 000001FA 00000000			convertedInput		SDWORD		?
 000001FE 00000000			digitsCounted		SDWORD		?



 00000000			.code
 00000000			main PROC
					mDisplayString		OFFSET	openingTitle
 00000000  52		     1		PUSH	EDX
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET	openingTitle
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  E8 00000000 E     1		CALL	CrLf
 00000010  5A		     1		POP		EDX
					mDisplayString		OFFSET	author
 00000011  52		     1		PUSH	EDX
 00000012  BA 00000028 R     1		MOV		EDX, OFFSET	author
 00000017  E8 00000000 E     1		CALL	WriteString
 0000001C  E8 00000000 E     1		CALL	CrLf
 00000021  5A		     1		POP		EDX
 00000022  E8 00000000 E		CALL	CrLf
					mDisplayString		OFFSET	instructionsOne
 00000027  52		     1		PUSH	EDX
 00000028  BA 00000036 R     1		MOV		EDX, OFFSET	instructionsOne
 0000002D  E8 00000000 E     1		CALL	WriteString
 00000032  E8 00000000 E     1		CALL	CrLf
 00000037  5A		     1		POP		EDX
					mDisplayString		OFFSET	instructionsTwo
 00000038  52		     1		PUSH	EDX
 00000039  BA 00000087 R     1		MOV		EDX, OFFSET	instructionsTwo
 0000003E  E8 00000000 E     1		CALL	WriteString
 00000043  E8 00000000 E     1		CALL	CrLf
 00000048  5A		     1		POP		EDX
						
 00000049  B9 0000000A			MOV		ECX, ARRAYSIZE
 0000004E  BF 000001D2 R		MOV		EDI, OFFSET userArray		
 00000053				_fillArrayLoop:
 00000053  B8 00000000				MOV		EAX, 0
 00000058  FF 35 000001CE R			PUSH	userDigitsEntered ; EBP + 28
 0000005E  6A 0D				PUSH	SIZEOF userInputBuffer ; EBP + 24
 00000060  68 000001FA R			PUSH	OFFSET convertedInput	; EBP + 20
 00000065  68 000000DB R			PUSH	OFFSET userPrompt ; EBP + 16 
 0000006A  68 000001A7 R			PUSH	OFFSET userInputBuffer ;EBP+12
 0000006F  68 000000F4 R			PUSH	OFFSET errorMessage ; EBP+8
 00000074  E8 0000002D				CALL	ReadVal
 00000079  A1 000001FA R			MOV		EAX, convertedInput
 0000007E  89 07				MOV		[EDI], EAX
 00000080  83 C7 04				ADD		EDI, 4
 00000083  E2 CE				LOOP	_fillArrayLoop
					
 00000085  68 000001FE R		PUSH	OFFSET	digitsCounted ; EBP + 16
 0000008A  68 000001C1 R		PUSH	OFFSET	outputBuffer
 0000008F  68 000001B4 R		PUSH	OFFSET	reverseOutputBuffer
 00000094  FF 35 000001FA R		PUSH	convertedInput
 0000009A  E8 00000090			CALL	WriteVal



					Invoke ExitProcess,0	; exit to operating system
 0000009F  6A 00	   *	    push   +000000000h
 000000A1  E8 00000000 E   *	    call   ExitProcess
 000000A6			main ENDP

 000000A6			ReadVal PROC
 000000A6  55				PUSH	EBP
 000000A7  8B EC			MOV		EBP, ESP
 000000A9  60				PUSHAD

 000000AA  EB 0F			JMP	_try

 000000AC				_errorTryAgain:
						mDisplayString [EBP+8]
 000000AC  52		     1		PUSH	EDX
 000000AD  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000B0  E8 00000000 E     1		CALL	WriteString
 000000B5  E8 00000000 E     1		CALL	CrLf
 000000BA  5A		     1		POP		EDX
 000000BB				_try:
						mGetString [EBP+16], [EBP+12], [EBP+24], [EBP+28]
 000000BB  60		     1		PUSHAD
 000000BC  8B 55 10	     1		MOV		EDX, [EBP+16]
 000000BF  E8 00000000 E     1		CALL	WriteString
 000000C4  8B 55 0C	     1		MOV		EDX, [EBP+12]
 000000C7  8B 4D 18	     1		MOV		ECX, [EBP+24]
 000000CA  E8 00000000 E     1		CALL	ReadString
 000000CF  89 45 1C	     1		MOV		[EBP+28], EAX
 000000D2  61		     1		POPAD


 000000D3  8B 75 0C			MOV		ESI, [EBP+12]
 000000D6  8B 4D 1C			MOV		ECX, [EBP+28]
 000000D9  B8 00000000			MOV		EAX, 0
 000000DE  BA 00000000			MOV		EDX, 0 ; DX == 1: number is negative. == 0: positive. save until end and use to decide of IMUL needed on final number
 000000E3				_conversionLoop:
 000000E3  50					PUSH	EAX
 000000E4  AC					LODSB
 000000E5  BB 00000000				MOV		EBX, 0
 000000EA  8A D8				MOV		BL, AL
 000000EC  58					POP		EAX
						
 000000ED  83 FB 2B				CMP		EBX, 43
 000000F0  74 28				JE		_skipToEnd
 000000F2  83 FB 2D				CMP		EBX, 45
 000000F5  74 1E				JE		_skipToEndNegative

 000000F7					_notSignSymbol:
 000000F7  83 FB 30					CMP		EBX, 48
 000000FA  7C B0					JL		_errorTryAgain
 000000FC  83 FB 39					CMP		EBX, 57
 000000FF  7F AB					JG		_errorTryAgain

 00000101  83 EB 30					SUB		EBX, 48
 00000104  52						PUSH	EDX
 00000105  BA 0000000A					MOV		EDX, 10
 0000010A  F7 E2					MUL		EDX
 0000010C  70 9E					JO		_errorTryAgain
 0000010E  5A						POP		EDX
 0000010F  03 C3					ADD		EAX, EBX
 00000111  70 99					JO		_errorTryAgain
 00000113  EB 05					JMP		_skipToEnd

 00000115					_skipToEndNegative:
 00000115  BA FFFFFFFF					MOV		EDX, -1
						
 0000011A					_skipToEnd:
 0000011A  E2 C7				LOOP _conversionLoop

 0000011C  83 FA FF			CMP		EDX, -1
 0000011F  74 02			JE		_makeNegative
 00000121  EB 02			JMP		_notNegative

 00000123				_makeNegative:
 00000123  F7 E2				MUL		EDX

 00000125				_notNegative:
 00000125  8B 5D 14				MOV		EBX, [EBP+20]
 00000128  89 03				MOV		[EBX], EAX
					
 0000012A  61				POPAD
 0000012B  5D				POP		EBP
 0000012C  C2 0018			RET		24 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 0000012F			ReadVal ENDP

 0000012F			WriteVal PROC
 0000012F  55				PUSH	EBP
 00000130  8B EC			MOV		EBP, ESP
 00000132  60				PUSHAD

 00000133  B9 00000000			MOV		ECX, 0
 00000138  8B 45 08			MOV		EAX, [EBP + 8]
 0000013B  BB 00000001			MOV		EBX, 1

 00000140  83 F8 00			CMP		EAX, 0
 00000143  7C 02			JL		_negativeNumber
 00000145  EB 06			JMP		_notNegative

 00000147				_negativeNumber:
 00000147  BB FFFFFFFF				MOV		EBX, -1
 0000014C  41					INC		ECX

 0000014D				_notNegative:
 0000014D  8B 7D 0C				MOV		EDI, [EBP + 12]
					
 00000150  BA 00000000			MOV		EDX, 0
 00000155  F7 E3			MUL		EBX
 00000157  53				PUSH	EBX
 00000158				_conversionLoop:
 00000158  BA 00000000				MOV		EDX, 0
 0000015D  BB 0000000A				MOV		EBX, 10
 00000162  F7 F3				DIV		EBX
 00000164  50					PUSH	EAX
 00000165  83 C2 30				ADD		EDX, 48
 00000168  8B C2				MOV		EAX, EDX
 0000016A  AA					STOSB
 0000016B  41					INC		ECX
 0000016C  58					POP		EAX
 0000016D  83 F8 00				CMP		EAX, 0
 00000170  75 E6				JNE		_conversionLoop
 00000172  5B				POP		EBX
 00000173  83 FB FF			CMP		EBX, -1
 00000176  74 02			JE		_addNegativeSign
 00000178  EB 03			JMP		_noNegativeSign

 0000017A				_addNegativeSign:
 0000017A  B0 2D				MOV		AL, 45
 0000017C  AA					STOSB

 0000017D				_noNegativeSign:
 0000017D  51					PUSH	ECX
 0000017E  FF 75 10				PUSH	[EBP + 16] ; REGULAR OUTPUT BUFFER
 00000181  FF 75 0C				PUSH	[EBP + 12] ; REVERSE OUTPUT BUFFER
 00000184  E8 00000014				CALL	ReverseString

 00000189  61				POPAD
 0000018A  5D				POP		EBP
 0000018B  C2 0010			RET		16 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 0000018E			WriteVal ENDP

 0000018E			DisplayList PROC
 0000018E  55				PUSH	EBP
 0000018F  8B EC			MOV		EBP, ESP


 00000191  5D				POP		EBP
 00000192  C3				RET		; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 00000193			DisplayList ENDP

 00000193			DisplaySum PROC
 00000193  55				PUSH	EBP
 00000194  8B EC			MOV		EBP, ESP


 00000196  5D				POP		EBP
 00000197  C3				RET		; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 00000198			DisplaySum ENDP

 00000198			DisplayAverage PROC
 00000198  55				PUSH	EBP
 00000199  8B EC			MOV		EBP, ESP


 0000019B  5D				POP		EBP
 0000019C  C3				RET		; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 0000019D			DisplayAverage ENDP

 0000019D			ReverseString PROC
 0000019D  55				PUSH	EBP
 0000019E  8B EC			MOV		EBP, ESP
 000001A0  60				PUSHAD

 000001A1  8B 75 08			MOV		ESI, [EBP+8] ;reverseBuffer OFFSET
 000001A4  8B 7D 0C			MOV		EDI, [EBP +12] ;outputBuffer OFFSET
 000001A7  8B 4D 10			MOV		ECX, [EBP+16] ;length of reverseBuffer
 000001AA  03 F1			ADD		ESI, ECX
 000001AC  4E				DEC		ESI

 000001AD				_reverseLoop:
 000001AD  FD					STD
 000001AE  AC					LODSB
 000001AF  FC					CLD
 000001B0  AA					STOSB
 000001B1  E2 FA				LOOP	_reverseLoop
					
 000001B3  61				POPAD
 000001B4  5D				POP		EBP
 000001B5  C2 000C			RET		12 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 000001B8			ReverseString ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 17:02:44
<Project 6: String Primitives and Macros    (Proj6_Allendr.a  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00000202 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000001B8 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayAverage . . . . . . . . .	P Near	 00000198 _TEXT	Length= 00000005 Public STDCALL
DisplayList  . . . . . . . . . .	P Near	 0000018E _TEXT	Length= 00000005 Public STDCALL
DisplaySum . . . . . . . . . . .	P Near	 00000193 _TEXT	Length= 00000005 Public STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000A6 _TEXT	Length= 00000089 Public STDCALL
  _errorTryAgain . . . . . . . .	L Near	 000000AC _TEXT	
  _try . . . . . . . . . . . . .	L Near	 000000BB _TEXT	
  _conversionLoop  . . . . . . .	L Near	 000000E3 _TEXT	
  _notSignSymbol . . . . . . . .	L Near	 000000F7 _TEXT	
  _skipToEndNegative . . . . . .	L Near	 00000115 _TEXT	
  _skipToEnd . . . . . . . . . .	L Near	 0000011A _TEXT	
  _makeNegative  . . . . . . . .	L Near	 00000123 _TEXT	
  _notNegative . . . . . . . . .	L Near	 00000125 _TEXT	
ReverseString  . . . . . . . . .	P Near	 0000019D _TEXT	Length= 0000001B Public STDCALL
  _reverseLoop . . . . . . . . .	L Near	 000001AD _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000012F _TEXT	Length= 0000005F Public STDCALL
  _negativeNumber  . . . . . . .	L Near	 00000147 _TEXT	
  _notNegative . . . . . . . . .	L Near	 0000014D _TEXT	
  _conversionLoop  . . . . . . .	L Near	 00000158 _TEXT	
  _addNegativeSign . . . . . . .	L Near	 0000017A _TEXT	
  _noNegativeSign  . . . . . . .	L Near	 0000017D _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000A6 Public STDCALL
  _fillArrayLoop . . . . . . . .	L Near	 00000053 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
author . . . . . . . . . . . . .	Byte	 00000028 _DATA	
averageMessage . . . . . . . . .	Byte	 00000179 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
convertedInput . . . . . . . . .	DWord	 000001FA _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digitsCounted  . . . . . . . . .	DWord	 000001FE _DATA	
errorMessage . . . . . . . . . .	Byte	 000000F4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeMessage . . . . . . . . .	Byte	 0000018A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructionsOne  . . . . . . . .	Byte	 00000036 _DATA	
instructionsTwo  . . . . . . . .	Byte	 00000087 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listMessage  . . . . . . . . . .	Byte	 00000149 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
openingTitle . . . . . . . . . .	Byte	 00000000 _DATA	
outputBuffer . . . . . . . . . .	Byte	 000001C1 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
reverseOutputBuffer  . . . . . .	Byte	 000001B4 _DATA	
sumMessage . . . . . . . . . . .	Byte	 0000016C _DATA	
tryAgainPrompt . . . . . . . . .	Byte	 00000136 _DATA	
userArray  . . . . . . . . . . .	DWord	 000001D2 _DATA	
userDigitsEntered  . . . . . . .	DWord	 000001CE _DATA	
userInputBuffer  . . . . . . . .	Byte	 000001A7 _DATA	
userPrompt . . . . . . . . . . .	Byte	 000000DB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
