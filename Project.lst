Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 23:37:45
<Project 6: String Primitives and Macros    (Proj6_Allendr.a  Page 1 - 1


				TITLE Project 6: String Primitives and Macros    (Proj6_Allendr.asm)

				; Author: Drew Allen
				; Last Modified: 3/13/21
				; OSU email address: Allendr@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number:    6             Due Date:  3/14/21
				; Description: This program implements two macros for string processing and tests them
				;				with several procedures
								

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				mGetString MACRO prompt, inputBuffer, inputLength, bytesRead
					PUSH	EDX
					PUSH	ECX
					PUSH	EAX
					
					MOV		EDX, prompt
					CALL	WriteString

					MOV		EDX, inputBuffer
					MOV		ECX, inputLength
					CALL	ReadString
					MOV		bytesRead, EAX
					
					POP		EAX
					POP		ECX
					POP		EDX
				ENDM

				mDisplayString MACRO storedArray
					PUSH	EDX
					
					MOV		EDX, storedArray
					CALL	WriteString
					
					POP		EDX
				ENDM


 = 0000000A				ARRAYSIZE			=			10

 00000000			.data

 00000000 50 52 4F 4A 45		openingTitle		BYTE		"PROJECT 6: String Primitives and Macros",0
	   43 54 20 36 3A
	   20 53 74 72 69
	   6E 67 20 50 72
	   69 6D 69 74 69
	   76 65 73 20 61
	   6E 64 20 4D 61
	   63 72 6F 73 00
 00000028 42 79 20 44 72		author				BYTE		"By Drew Allen",0
	   65 77 20 41 6C
	   6C 65 6E 00
 00000036 50 6C 65 61 73		instructionsOne		BYTE		"Please input ten signed decimal integers that can each fit in a 32 bit register.",0
	   65 20 69 6E 70
	   75 74 20 74 65
	   6E 20 73 69 67
	   6E 65 64 20 64
	   65 63 69 6D 61
	   6C 20 69 6E 74
	   65 67 65 72 73
	   20 74 68 61 74
	   20 63 61 6E 20
	   65 61 63 68 20
	   66 69 74 20 69
	   6E 20 61 20 33
	   32 20 62 69 74
	   20 72 65 67 69
	   73 74 65 72 2E
	   00
 00000087 54 68 65 6E 20		instructionsTwo		BYTE		"Then this program will display a list of the numbers, their sum, and their average.",0
	   74 68 69 73 20
	   70 72 6F 67 72
	   61 6D 20 77 69
	   6C 6C 20 64 69
	   73 70 6C 61 79
	   20 61 20 6C 69
	   73 74 20 6F 66
	   20 74 68 65 20
	   6E 75 6D 62 65
	   72 73 2C 20 74
	   68 65 69 72 20
	   73 75 6D 2C 20
	   61 6E 64 20 74
	   68 65 69 72 20
	   61 76 65 72 61
	   67 65 2E 00
 000000DB 45 6E 74 65 72		userPrompt			BYTE		"Enter a signed integer: ",0
	   20 61 20 73 69
	   67 6E 65 64 20
	   69 6E 74 65 67
	   65 72 3A 20 00
 000000F4 45 52 52 4F 52		errorMessage		BYTE		"ERROR: Invalid input. Entry was too large or not a signed number.",0
	   3A 20 49 6E 76
	   61 6C 69 64 20
	   69 6E 70 75 74
	   2E 20 45 6E 74
	   72 79 20 77 61
	   73 20 74 6F 6F
	   20 6C 61 72 67
	   65 20 6F 72 20
	   6E 6F 74 20 61
	   20 73 69 67 6E
	   65 64 20 6E 75
	   6D 62 65 72 2E
	   00
 00000136 50 6C 65 61 73		tryAgainPrompt		BYTE		"Please try again: ",0
	   65 20 74 72 79
	   20 61 67 61 69
	   6E 3A 20 00
 00000149 48 65 72 65 20		listMessage			BYTE		"Here are the numbers you entered: ",0
	   61 72 65 20 74
	   68 65 20 6E 75
	   6D 62 65 72 73
	   20 79 6F 75 20
	   65 6E 74 65 72
	   65 64 3A 20 00
 0000016C 54 68 65 20 73		sumMessage			BYTE		"The sum is: ",0
	   75 6D 20 69 73
	   3A 20 00
 00000179 54 68 65 20 61		averageMessage		BYTE		"The average is: ",0
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000018A 54 68 61 6E 6B		goodbyeMessage		BYTE		"Thanks for playing! Goodbye.",0
	   73 20 66 6F 72
	   20 70 6C 61 79
	   69 6E 67 21 20
	   47 6F 6F 64 62
	   79 65 2E 00
 000001A7 2C 20 00			spacing				BYTE		", ",0



 000001AA  00000032 [			userInputBuffer		BYTE		50 DUP(?)
	    00
	   ]
 000001DC  00000032 [			reverseOutputBuffer	BYTE		50 DUP(?)
	    00
	   ]
 0000020E  00000032 [			outputBuffer		BYTE		50 DUP(?)
	    00
	   ]
 00000240 00000000			userDigitsEntered	SDWORD		?
 00000244  0000000A [			userArray			SDWORD		ARRAYSIZE DUP(?)
	    00000000
	   ]
 0000026C 00000000			convertedInput		SDWORD		?
 00000270 00000000			digitsCounted		SDWORD		?
 00000274 00000000			sum					SDWORD		?
 00000278 00000000			average				SDWORD		?



 00000000			.code
 00000000			main PROC

					mDisplayString		OFFSET	openingTitle
 00000000  52		     1		PUSH	EDX
 00000001  BA 00000000 R     1		MOV		EDX, OFFSET	openingTitle
 00000006  E8 00000000 E     1		CALL	WriteString
 0000000B  5A		     1		POP		EDX
					mDisplayString		OFFSET	author
 0000000C  52		     1		PUSH	EDX
 0000000D  BA 00000028 R     1		MOV		EDX, OFFSET	author
 00000012  E8 00000000 E     1		CALL	WriteString
 00000017  5A		     1		POP		EDX
 00000018  E8 00000000 E		CALL	CrLf
					mDisplayString		OFFSET	instructionsOne
 0000001D  52		     1		PUSH	EDX
 0000001E  BA 00000036 R     1		MOV		EDX, OFFSET	instructionsOne
 00000023  E8 00000000 E     1		CALL	WriteString
 00000028  5A		     1		POP		EDX
					mDisplayString		OFFSET	instructionsTwo
 00000029  52		     1		PUSH	EDX
 0000002A  BA 00000087 R     1		MOV		EDX, OFFSET	instructionsTwo
 0000002F  E8 00000000 E     1		CALL	WriteString
 00000034  5A		     1		POP		EDX
 00000035  E8 00000000 E		CALL	CrLf
 0000003A  E8 00000000 E		CALL	CrLf
						
 0000003F  B9 0000000A			MOV		ECX, ARRAYSIZE
 00000044  BF 00000244 R		MOV		EDI, OFFSET userArray		
 00000049				_fillArrayLoop:
 00000049  B8 00000000				MOV		EAX, 0
 0000004E  FF 35 00000240 R			PUSH	userDigitsEntered ; EBP + 28
 00000054  6A 32				PUSH	SIZEOF userInputBuffer ; EBP + 24
 00000056  68 0000026C R			PUSH	OFFSET convertedInput	; EBP + 20
 0000005B  68 000000DB R			PUSH	OFFSET userPrompt ; EBP + 16 
 00000060  68 000001AA R			PUSH	OFFSET userInputBuffer ;EBP+12
 00000065  68 000000F4 R			PUSH	OFFSET errorMessage ; EBP+8
 0000006A  E8 0000007A				CALL	ReadVal
 0000006F  A1 0000026C R			MOV		EAX, convertedInput
 00000074  89 07				MOV		[EDI], EAX
 00000076  83 C7 04				ADD		EDI, 4
 00000079  E2 CE				LOOP	_fillArrayLoop
					

 0000007B  6A 0A			PUSH	LENGTHOF userArray ; EBP + 40
 0000007D  6A 32			PUSH	LENGTHOF outputBuffer ; + 36
 0000007F  6A 32			PUSH	LENGTHOF reverseOutputBuffer ; + 32
 00000081  68 000001A7 R		PUSH	OFFSET	spacing ; + 28
 00000086  68 00000149 R		PUSH	OFFSET	listMessage ; + 24
 0000008B  68 00000270 R		PUSH	OFFSET	digitsCounted ; EBP + 20
 00000090  68 0000020E R		PUSH	OFFSET	outputBuffer ; + 16
 00000095  68 000001DC R		PUSH	OFFSET	reverseOutputBuffer ; +12
 0000009A  68 00000244 R		PUSH	OFFSET	userArray ; + 8
 0000009F  E8 0000012D			CALL	DisplayList

 000000A4  6A 32			PUSH	LENGTHOF outputBuffer
 000000A6  6A 32			PUSH	LENGTHOF reverseOutputBuffer
 000000A8  68 0000020E R		PUSH	OFFSET outputBuffer
 000000AD  68 000001DC R		PUSH	OFFSET reverseOutputBuffer
 000000B2  6A 0A			PUSH	LENGTHOF userArray ; + 16
 000000B4  68 0000016C R		PUSH	OFFSET sumMessage ; + 12
 000000B9  68 00000244 R		PUSH	OFFSET userArray ; + 8
 000000BE  E8 0000016E			CALL	DisplaySum

 000000C3  6A 32			PUSH	LENGTHOF outputBuffer
 000000C5  6A 32			PUSH	LENGTHOF reverseOutputBuffer
 000000C7  68 0000020E R		PUSH	OFFSET outputBuffer
 000000CC  68 000001DC R		PUSH	OFFSET reverseOutputBuffer
 000000D1  6A 0A			PUSH	LENGTHOF userArray ; + 16
 000000D3  68 00000179 R		PUSH	OFFSET averageMessage ; + 12
 000000D8  68 00000244 R		PUSH	OFFSET userArray ; + 8
 000000DD  E8 000001A8			CALL	DisplayAverage

					Invoke ExitProcess,0	; exit to operating system
 000000E2  6A 00	   *	    push   +000000000h
 000000E4  E8 00000000 E   *	    call   ExitProcess
 000000E9			main ENDP

 000000E9			ReadVal PROC
 000000E9  55				PUSH	EBP
 000000EA  8B EC			MOV		EBP, ESP
 000000EC  60				PUSHAD
						
 000000ED  EB 0B			JMP	_try

 000000EF				_errorTryAgain:
 000000EF  5A					POP		EDX
						mDisplayString [EBP+8]
 000000F0  52		     1		PUSH	EDX
 000000F1  8B 55 08	     1		MOV		EDX, [EBP+8]
 000000F4  E8 00000000 E     1		CALL	WriteString
 000000F9  5A		     1		POP		EDX
 000000FA				_try:
						mGetString [EBP+16], [EBP+12], [EBP+24], [EBP+28]
 000000FA  52		     1		PUSH	EDX
 000000FB  51		     1		PUSH	ECX
 000000FC  50		     1		PUSH	EAX
 000000FD  8B 55 10	     1		MOV		EDX, [EBP+16]
 00000100  E8 00000000 E     1		CALL	WriteString
 00000105  8B 55 0C	     1		MOV		EDX, [EBP+12]
 00000108  8B 4D 18	     1		MOV		ECX, [EBP+24]
 0000010B  E8 00000000 E     1		CALL	ReadString
 00000110  89 45 1C	     1		MOV		[EBP+28], EAX
 00000113  58		     1		POP		EAX
 00000114  59		     1		POP		ECX
 00000115  5A		     1		POP		EDX


 00000116  8B 75 0C			MOV		ESI, [EBP+12]
 00000119  8B 4D 1C			MOV		ECX, [EBP+28]
 0000011C  B8 00000000			MOV		EAX, 0
 00000121  BA 00000000			MOV		EDX, 0 ; DX == 1: number is negative. == 0: positive. save until end and use to decide of IMUL needed on final number
 00000126				_conversionLoop:
 00000126  50					PUSH	EAX
 00000127  AC					LODSB
 00000128  BB 00000000				MOV		EBX, 0
 0000012D  8A D8				MOV		BL, AL
 0000012F  58					POP		EAX
						
 00000130  83 FB 2B				CMP		EBX, 43
 00000133  74 28				JE		_skipToEnd
 00000135  83 FB 2D				CMP		EBX, 45
 00000138  74 1E				JE		_skipToEndNegative

 0000013A					_notSignSymbol:
 0000013A  83 FB 30					CMP		EBX, 48
 0000013D  7C B0					JL		_errorTryAgain
 0000013F  83 FB 39					CMP		EBX, 57
 00000142  7F AB					JG		_errorTryAgain

 00000144  83 EB 30					SUB		EBX, 48
 00000147  52						PUSH	EDX
 00000148  BA 0000000A					MOV		EDX, 10
 0000014D  F7 E2					MUL		EDX
 0000014F  70 9E					JO		_errorTryAgain
 00000151  03 C3					ADD		EAX, EBX
 00000153  70 9A					JO		_errorTryAgain
 00000155  5A						POP		EDX
 00000156  EB 05					JMP		_skipToEnd

 00000158					_skipToEndNegative:
 00000158  BA FFFFFFFF					MOV		EDX, -1
						
 0000015D					_skipToEnd:
 0000015D  E2 C7				LOOP _conversionLoop

 0000015F  83 FA FF			CMP		EDX, -1
 00000162  74 02			JE		_makeNegative
 00000164  EB 02			JMP		_notNegative

 00000166				_makeNegative:
 00000166  F7 E2				MUL		EDX

 00000168				_notNegative:
 00000168  8B 5D 14				MOV		EBX, [EBP+20]
 0000016B  89 03				MOV		[EBX], EAX
					
 0000016D  61				POPAD
 0000016E  5D				POP		EBP
 0000016F  C2 0018			RET		24 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 00000172			ReadVal ENDP

 00000172			WriteVal PROC
 00000172  55				PUSH	EBP
 00000173  8B EC			MOV		EBP, ESP
 00000175  60				PUSHAD

 00000176  B9 00000000			MOV		ECX, 0
 0000017B  8B 45 08			MOV		EAX, [EBP + 8] ; integer value
 0000017E  BB 00000001			MOV		EBX, 1

 00000183  83 F8 00			CMP		EAX, 0
 00000186  7C 02			JL		_negativeNumber
 00000188  EB 06			JMP		_notNegative

 0000018A				_negativeNumber:
 0000018A  BB FFFFFFFF				MOV		EBX, -1
 0000018F  41					INC		ECX

 00000190				_notNegative:
 00000190  8B 7D 0C				MOV		EDI, [EBP + 12] ; reverse output
					
 00000193  BA 00000000			MOV		EDX, 0
 00000198  F7 E3			MUL		EBX
 0000019A  53				PUSH	EBX
 0000019B				_conversionLoop:
 0000019B  BA 00000000				MOV		EDX, 0
 000001A0  BB 0000000A				MOV		EBX, 10
 000001A5  F7 F3				DIV		EBX
 000001A7  50					PUSH	EAX
 000001A8  83 C2 30				ADD		EDX, 48
 000001AB  8B C2				MOV		EAX, EDX
 000001AD  AA					STOSB
 000001AE  41					INC		ECX
 000001AF  58					POP		EAX
 000001B0  83 F8 00				CMP		EAX, 0
 000001B3  75 E6				JNE		_conversionLoop
 000001B5  5B				POP		EBX
 000001B6  83 FB FF			CMP		EBX, -1
 000001B9  74 02			JE		_addNegativeSign
 000001BB  EB 03			JMP		_noNegativeSign

 000001BD				_addNegativeSign:
 000001BD  B0 2D				MOV		AL, 45
 000001BF  AA					STOSB

 000001C0				_noNegativeSign:
 000001C0  51					PUSH	ECX
 000001C1  FF 75 10				PUSH	[EBP + 16] ; REGULAR OUTPUT BUFFER
 000001C4  FF 75 0C				PUSH	[EBP + 12] ; REVERSE OUTPUT BUFFER
 000001C7  E8 00000128				CALL	ReverseString

 000001CC  61				POPAD
 000001CD  5D				POP		EBP
 000001CE  C2 000C			RET		12 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 000001D1			WriteVal ENDP

 000001D1			DisplayList PROC
 000001D1  55				PUSH	EBP
 000001D2  8B EC			MOV		EBP, ESP
 000001D4  60				PUSHAD

 000001D5  8B 4D 28			MOV		ECX, [EBP + 40]
 000001D8  8B 75 08			MOV		ESI, [EBP + 8]

 000001DB  E8 00000000 E		CALL	CrLf
					mDisplayString [EBP + 24] ; HEADER MESSAGE
 000001E0  52		     1		PUSH	EDX
 000001E1  8B 55 18	     1		MOV		EDX, [EBP + 24]
 000001E4  E8 00000000 E     1		CALL	WriteString
 000001E9  5A		     1		POP		EDX
 000001EA  E8 00000000 E		CALL	CrLf

 000001EF				_displayLoop:
 000001EF  8B 06				MOV		EAX, [ESI]
						
 000001F1  FF 75 0C				PUSH	[EBP + 12] ; reverse buffer
 000001F4  FF 75 20				PUSH	[EBP + 32] ; reverse length
 000001F7  E8 00000113				CALL	ClearString

 000001FC  FF 75 10				PUSH	[EBP + 16] ; OUTPUT BUFFER
 000001FF  FF 75 24				PUSH	[EBP + 36] ; output buffer length
 00000202  E8 00000108				CALL	ClearString

 00000207  FF 75 10				PUSH	[EBP + 16]
 0000020A  FF 75 0C				PUSH	[EBP + 12]
 0000020D  50					PUSH	EAX
 0000020E  E8 FFFFFF5F				CALL	WriteVal
						
						mDisplayString [EBP + 16] ; OUTPUT BUFFER
 00000213  52		     1		PUSH	EDX
 00000214  8B 55 10	     1		MOV		EDX, [EBP + 16]
 00000217  E8 00000000 E     1		CALL	WriteString
 0000021C  5A		     1		POP		EDX
						mDisplayString [EBP + 28] ; SPACING
 0000021D  52		     1		PUSH	EDX
 0000021E  8B 55 1C	     1		MOV		EDX, [EBP + 28]
 00000221  E8 00000000 E     1		CALL	WriteString
 00000226  5A		     1		POP		EDX
 00000227  83 C6 04				ADD		ESI, 4
 0000022A  E2 C3				LOOP	_displayLoop

 0000022C  61				POPAD
 0000022D  5D				POP		EBP
 0000022E  C2 0024			RET		36 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 00000231			DisplayList ENDP

 00000231			DisplaySum PROC
 00000231  55				PUSH	EBP
 00000232  8B EC			MOV		EBP, ESP

 00000234  FF 75 14			PUSH	[EBP + 20]
 00000237  FF 75 1C			PUSH	[EBP + 28]
 0000023A  E8 000000D0			CALL	ClearString

 0000023F  FF 75 18			PUSH	[EBP + 24]
 00000242  FF 75 20			PUSH	[EBP + 32]
 00000245  E8 000000C5			CALL	ClearString

 0000024A  B8 00000000			MOV		EAX, 0
 0000024F  8B 75 08			MOV		ESI, [EBP + 8] ;USERARRAY OFFSET
 00000252  8B 4D 10			MOV		ECX, [EBP + 16]

 00000255				_sumLoop:
 00000255  03 06				ADD		EAX, [ESI]
 00000257  83 C6 04				ADD		ESI, 4
 0000025A  E2 F9				LOOP	_sumLoop
					
 0000025C  FF 75 18			PUSH	[EBP + 24]
 0000025F  FF 75 14			PUSH	[EBP + 20]
 00000262  50				PUSH	EAX
 00000263  E8 FFFFFF0A			CALL	WriteVal

 00000268  E8 00000000 E		CALL	CrLf
 0000026D  E8 00000000 E		CALL	CrLf
					mDisplayString [EBP + 12]
 00000272  52		     1		PUSH	EDX
 00000273  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 00000276  E8 00000000 E     1		CALL	WriteString
 0000027B  5A		     1		POP		EDX
					mDisplayString [EBP + 24]
 0000027C  52		     1		PUSH	EDX
 0000027D  8B 55 18	     1		MOV		EDX, [EBP + 24]
 00000280  E8 00000000 E     1		CALL	WriteString
 00000285  5A		     1		POP		EDX

 00000286  5D				POP		EBP
 00000287  C2 001C			RET		28 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 0000028A			DisplaySum ENDP

 0000028A			DisplayAverage PROC
 0000028A  55				PUSH	EBP
 0000028B  8B EC			MOV		EBP, ESP
 0000028D  60				PUSHAD


 0000028E  FF 75 14			PUSH	[EBP + 20]
 00000291  FF 75 1C			PUSH	[EBP + 28]
 00000294  E8 00000076			CALL	ClearString

 00000299  FF 75 18			PUSH	[EBP + 24]
 0000029C  FF 75 20			PUSH	[EBP + 32]
 0000029F  E8 0000006B			CALL	ClearString

 000002A4  B8 00000000			MOV		EAX, 0
 000002A9  8B 75 08			MOV		ESI, [EBP + 8] ;USERARRAY OFFSET
 000002AC  8B 4D 10			MOV		ECX, [EBP + 16]

 000002AF				_sumLoop:
 000002AF  03 06				ADD		EAX, [ESI]
 000002B1  83 C6 04				ADD		ESI, 4
 000002B4  E2 F9				LOOP	_sumLoop
					
 000002B6  BA 00000000			MOV		EDX, 0
 000002BB  8B 5D 10			MOV		EBX, [EBP + 16]
 000002BE  F7 FB			IDIV	EBX

 000002C0  FF 75 18			PUSH	[EBP + 24]
 000002C3  FF 75 14			PUSH	[EBP + 20]
 000002C6  50				PUSH	EAX
 000002C7  E8 FFFFFEA6			CALL	WriteVal

 000002CC  E8 00000000 E		CALL	CrLf
 000002D1  E8 00000000 E		CALL	CrLf
					mDisplayString [EBP + 12]
 000002D6  52		     1		PUSH	EDX
 000002D7  8B 55 0C	     1		MOV		EDX, [EBP + 12]
 000002DA  E8 00000000 E     1		CALL	WriteString
 000002DF  5A		     1		POP		EDX
					mDisplayString [EBP + 24]
 000002E0  52		     1		PUSH	EDX
 000002E1  8B 55 18	     1		MOV		EDX, [EBP + 24]
 000002E4  E8 00000000 E     1		CALL	WriteString
 000002E9  5A		     1		POP		EDX
 000002EA  E8 00000000 E		CALL	CrLf

 000002EF  61				POPAD
 000002F0  5D				POP		EBP
 000002F1  C2 001C			RET		28 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 000002F4			DisplayAverage ENDP

 000002F4			ReverseString PROC
 000002F4  55				PUSH	EBP
 000002F5  8B EC			MOV		EBP, ESP
 000002F7  60				PUSHAD

 000002F8  8B 75 08			MOV		ESI, [EBP+8] ;reverseBuffer OFFSET
 000002FB  8B 7D 0C			MOV		EDI, [EBP +12] ;outputBuffer OFFSET
 000002FE  8B 4D 10			MOV		ECX, [EBP+16] ;length of reverseBuffer
 00000301  03 F1			ADD		ESI, ECX
 00000303  4E				DEC		ESI

 00000304				_reverseLoop:
 00000304  FD					STD
 00000305  AC					LODSB
 00000306  FC					CLD
 00000307  AA					STOSB
 00000308  E2 FA				LOOP	_reverseLoop
					
 0000030A  61				POPAD
 0000030B  5D				POP		EBP
 0000030C  C2 000C			RET		12 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 0000030F			ReverseString ENDP

 0000030F			ClearString PROC
 0000030F  55				PUSH	EBP
 00000310  8B EC			MOV		EBP, ESP
 00000312  60				PUSHAD

 00000313  8B 4D 08			MOV		ECX, [EBP + 8];LENGTHOF BUFFER
 00000316  8B 7D 0C			MOV		EDI, [EBP + 12];BUFFER TO CLEAR
 00000319  BB 00000000			MOV		EBX, 0

 0000031E				_clearLoop:
 0000031E  89 1F				MOV		[EDI], EBX
 00000320  47					INC		EDI
 00000321  E2 FB				LOOP	_clearLoop
					
 00000323  61				POPAD
 00000324  5D				POP		EBP
 00000325  C2 0008			RET		8 ; N equal to the number of bytes of parameters which were pushed on the stack before the CALL statement.
 00000328			ClearString ENDP


				END main
Microsoft (R) Macro Assembler Version 14.28.29335.0	    03/14/21 23:37:45
<Project 6: String Primitives and Macros    (Proj6_Allendr.a  Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000027C Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000328 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

ClearString  . . . . . . . . . .	P Near	 0000030F _TEXT	Length= 00000019 Public STDCALL
  _clearLoop . . . . . . . . . .	L Near	 0000031E _TEXT	
CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DisplayAverage . . . . . . . . .	P Near	 0000028A _TEXT	Length= 0000006A Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 000002AF _TEXT	
DisplayList  . . . . . . . . . .	P Near	 000001D1 _TEXT	Length= 00000060 Public STDCALL
  _displayLoop . . . . . . . . .	L Near	 000001EF _TEXT	
DisplaySum . . . . . . . . . . .	P Near	 00000231 _TEXT	Length= 00000059 Public STDCALL
  _sumLoop . . . . . . . . . . .	L Near	 00000255 _TEXT	
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 000000E9 _TEXT	Length= 00000089 Public STDCALL
  _errorTryAgain . . . . . . . .	L Near	 000000EF _TEXT	
  _try . . . . . . . . . . . . .	L Near	 000000FA _TEXT	
  _conversionLoop  . . . . . . .	L Near	 00000126 _TEXT	
  _notSignSymbol . . . . . . . .	L Near	 0000013A _TEXT	
  _skipToEndNegative . . . . . .	L Near	 00000158 _TEXT	
  _skipToEnd . . . . . . . . . .	L Near	 0000015D _TEXT	
  _makeNegative  . . . . . . . .	L Near	 00000166 _TEXT	
  _notNegative . . . . . . . . .	L Near	 00000168 _TEXT	
ReverseString  . . . . . . . . .	P Near	 000002F4 _TEXT	Length= 0000001B Public STDCALL
  _reverseLoop . . . . . . . . .	L Near	 00000304 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 00000172 _TEXT	Length= 0000005F Public STDCALL
  _negativeNumber  . . . . . . .	L Near	 0000018A _TEXT	
  _notNegative . . . . . . . . .	L Near	 00000190 _TEXT	
  _conversionLoop  . . . . . . .	L Near	 0000019B _TEXT	
  _addNegativeSign . . . . . . .	L Near	 000001BD _TEXT	
  _noNegativeSign  . . . . . . .	L Near	 000001C0 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000000E9 Public STDCALL
  _fillArrayLoop . . . . . . . .	L Near	 00000049 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAYSIZE  . . . . . . . . . . .	Number	 0000000Ah   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
author . . . . . . . . . . . . .	Byte	 00000028 _DATA	
averageMessage . . . . . . . . .	Byte	 00000179 _DATA	
average  . . . . . . . . . . . .	DWord	 00000278 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
convertedInput . . . . . . . . .	DWord	 0000026C _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
digitsCounted  . . . . . . . . .	DWord	 00000270 _DATA	
errorMessage . . . . . . . . . .	Byte	 000000F4 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
goodbyeMessage . . . . . . . . .	Byte	 0000018A _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
instructionsOne  . . . . . . . .	Byte	 00000036 _DATA	
instructionsTwo  . . . . . . . .	Byte	 00000087 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
listMessage  . . . . . . . . . .	Byte	 00000149 _DATA	
magenta  . . . . . . . . . . . .	Number	 00000005h   
openingTitle . . . . . . . . . .	Byte	 00000000 _DATA	
outputBuffer . . . . . . . . . .	Byte	 0000020E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
reverseOutputBuffer  . . . . . .	Byte	 000001DC _DATA	
spacing  . . . . . . . . . . . .	Byte	 000001A7 _DATA	
sumMessage . . . . . . . . . . .	Byte	 0000016C _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000274 _DATA	
tryAgainPrompt . . . . . . . . .	Byte	 00000136 _DATA	
userArray  . . . . . . . . . . .	DWord	 00000244 _DATA	
userDigitsEntered  . . . . . . .	DWord	 00000240 _DATA	
userInputBuffer  . . . . . . . .	Byte	 000001AA _DATA	
userPrompt . . . . . . . . . . .	Byte	 000000DB _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
